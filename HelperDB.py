import sqlite3
import datetime
import json

conn = sqlite3.connect('dates.db', check_same_thread=False)
cursor = conn.cursor()

def createDataBase():

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS dates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT
        )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admins(
            chat_id INTEGER PRIMARY KEY UNIQUE,
            username TEXT UNIQUE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS dialogs (
            user_id INTEGER PRIMARY KEY,
            dialog_history TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegramChatId TEXT UNIQUE DEFAULT NULL,
            telegramUserId TEXT UNIQUE DEFAULT NULL,
            whatsappPhoneNumber TEXT UNIQUE DEFAULT NULL,
            instagramUserId TEXT UNIQUE DEFAULT NULL,
            waiting TEXT DEFAULT "False"
        )
    ''')
    conn.commit()

def save_data_to_db(date):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite, —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ"""
    try:
        date_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%Y-%m-%d")

        cursor.execute("PRAGMA table_info(dates)")
        columns = [info[1] for info in cursor.fetchall()]

        insert_columns = ", ".join(columns[1:])
        placeholders = ", ".join(["?"] * len(columns[1:]))

        values = [formatted_date] + ['free'] * (len(columns) - 2)

        cursor.execute(f"INSERT INTO dates ({insert_columns}) VALUES ({placeholders})", values)
        conn.commit()

        return "‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
    except ValueError:
        return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD."
    except sqlite3.IntegrityError:
        return "‚ö†Ô∏è –¢–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"


def get_sorted_dates():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ"""
    cursor.execute("SELECT * FROM dates ORDER BY date ASC")
    all_dates = cursor.fetchall()
    return [date[1] for date in all_dates]


def delete_date_from_db(data):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        date_obj = datetime.datetime.strptime(data, "%Y-%m-%d")
    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD"

    formatted_date = date_obj.strftime("%Y-%m-%d")

    cursor.execute("SELECT * FROM dates WHERE date = ?", (formatted_date,))
    if cursor.fetchone() is None:
        return "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    cursor.execute("DELETE FROM dates WHERE date = ?", (formatted_date,))
    conn.commit()

    cursor.execute("SELECT * FROM dates WHERE date = ?", (formatted_date,))
    if cursor.fetchone() is None:
        return "–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."

def get_all_dates_from_db():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ"""
    cursor.execute("SELECT * FROM dates ORDER BY date ASC")
    rows = cursor.fetchall()
    return [date[1] for date in rows]

def get_dialog_from_db(user_id):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute("SELECT dialog_history FROM dialogs WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        return json.loads(row[0])
    return []

def save_dialog_to_db(user_id, dialog_history):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    dialog_json = json.dumps(dialog_history)
    cursor.execute(
        "INSERT OR REPLACE INTO dialogs (user_id, dialog_history) VALUES (?, ?)",
        (user_id, dialog_json)
    )
    conn.commit()

def add_user(message):
    try:
        cursor.execute(
        "INSERT INTO users (telegramChatId, telegramUserId) VALUES (?, ?)",
        (message.chat.id, message.from_user.username)
        )
        conn.commit()
    except sqlite3.IntegrityError as e:
        e = e

def change_waiting_flag_true(chatId):
    cursor.execute("UPDATE users SET waiting = 'True' WHERE telegramChatId = ?", (chatId,))
    conn.commit()

def change_waiting_flag_false(chatId):
    cursor.execute("UPDATE users SET waiting = 'False' WHERE telegramChatId = ?", (chatId,))
    conn.commit()

def if_user_waiting_admin(message):
    cursor.execute("SELECT * FROM users WHERE waiting = 'True'", (message,))
    print(cursor.fetchone())
    conn.commit()

def get_waiting_users():
    cursor.execute("SELECT telegramChatId FROM users WHERE waiting = 'True'")
    rows = cursor.fetchall()
    return [row[0] for row in rows]

def add_column(column_name):
    try:
        cursor.execute(f"ALTER TABLE dates ADD COLUMN {column_name} TEXT DEFAULT 'free'")
        conn.commit()
        return f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
    except sqlite3.OperationalError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def remove_column(column_name):
    try:
        cursor.execute("PRAGMA table_info(dates)")
        columns = [info[1] for info in cursor.fetchall()]

        if column_name not in columns:
            return f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        columns.remove(column_name)

        columns_str = ", ".join(columns)

        cursor.execute(f"CREATE TABLE dates_temp AS SELECT {columns_str} FROM dates")
        conn.commit()

        cursor.execute("DROP TABLE dates")
        conn.commit()

        cursor.execute("ALTER TABLE dates_temp RENAME TO dates")
        conn.commit()

        return f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def update_slot(date, column_name, status):
    try:
        cursor.execute(f"UPDATE dates SET {column_name} = ? WHERE date = ?", (status, date))
        conn.commit()
        return f"‚úÖ –°–ª–æ—Ç '{column_name}' –Ω–∞ –¥–∞—Ç—É '{date}' –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'."
    except sqlite3.OperationalError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def view_dates():
    cursor.execute("SELECT * FROM dates")
    rows = cursor.fetchall()
    columns = [description[0] for description in cursor.description]

    table = [columns] + rows
    return table

def book_slot(date, column_name):
    try:
        cursor.execute(f"SELECT {column_name} FROM dates WHERE date = ?", (date,))
        status = cursor.fetchone()

        if status and status[0] == "free":
            cursor.execute(f"UPDATE dates SET {column_name} = 'booked' WHERE date = ?", (date,))
            conn.commit()
            return f"‚úÖ –°–ª–æ—Ç '{column_name}' –Ω–∞ –¥–∞—Ç—É '{date}' —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω."
        elif status:
            return f"‚ö†Ô∏è –°–ª–æ—Ç '{column_name}' –Ω–∞ –¥–∞—Ç—É '{date}' —É–∂–µ –∑–∞–Ω—è—Ç."
        else:
            return f"‚ö†Ô∏è –î–∞—Ç–∞ '{date}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    except sqlite3.OperationalError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def format_table():
    try:
        cursor.execute("SELECT * FROM dates")
        rows = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]

        column_widths = [max(len(str(value)) for value in [col] + [row[idx] for row in rows]) for idx, col in enumerate(columns)]

        table = "‚îå" + "‚î¨".join("‚îÄ" * (w + 2) for w in column_widths) + "‚îê\n"

        header = "‚îÇ " + " ‚îÇ ".join(f"{col.ljust(column_widths[idx])}" for idx, col in enumerate(columns)) + " ‚îÇ\n"
        table += header

        table += "‚îú" + "‚îº".join("‚îÄ" * (w + 2) for w in column_widths) + "‚î§\n"

        for row in rows:
            row_line = "‚îÇ " + " ‚îÇ ".join(f"{str(value).ljust(column_widths[idx])}" for idx, value in enumerate(row)) + " ‚îÇ\n"
            table += row_line

        table += "‚îî" + "‚î¥".join("‚îÄ" * (w + 2) for w in column_widths) + "‚îò\n"

        return f"üìã –¢–∞–±–ª–∏—Ü–∞ dates:\n```\n{table}```"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"


def check_dates_and_cabins():
    try:
        cursor.execute("SELECT * FROM dates")
        rows = cursor.fetchall()

        if not rows:
            return "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

        response = ""

        for row in rows:
            date = row[1]
            columns = [desc[0] for desc in cursor.description][2:]

            statuses = {columns[idx]: value for idx, value in enumerate(row[2:])}

            free = [k for k, v in statuses.items() if v == "free"]
            occupied = [k for k, v in statuses.items() if v != "free"]

            response += f"–ù–∞ {date}:\n"
            if free:
                response += f"‚úÖ –°–≤–æ–±–æ–¥–Ω—ã: {', '.join(free)}\n"
            if occupied:
                response += f"‚ùå –ó–∞–Ω—è—Ç—ã: {', '.join(occupied)}\n"

        return response

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def clear_dialog(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cursor.execute("DELETE FROM dialogs WHERE user_id = ?", (user_id,))
        conn.commit()
        return f"‚úÖ –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞: {e}"

def add_admin(username):
    cursor.execute("SELECT telegramChatId FROM users WHERE telegramUserId = ?", (username,))
    result = cursor.fetchone()
    chat_id = result[0]
    cursor.execute("INSERT INTO admins (chat_id, username) VALUES (?, ?)", (chat_id, username))
    conn.commit()
    return f"–ê–¥–º–∏–Ω —Å username {username} –∏ chatId {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω."

def delete_admin(username):
    cursor.execute("DELETE FROM admins WHERE username = ?", (username,))
    conn.commit()
    return f"–ê–¥–º–∏–Ω —Å username {username} —É–¥–∞–ª–µ–Ω."

def check_admins():
    cursor.execute("SELECT chat_id FROM admins")
    chat_ids = [row[0] for row in cursor.fetchall()]
    cursor.execute("SELECT username FROM admins")
    usernames = [row[0] for row in cursor.fetchall()]
    return [chat_ids, usernames]

def check_waiting_status(chatId):
    try:
        cursor.execute("SELECT waiting FROM users WHERE telegramChatId = ?", (chatId,))
        result = cursor.fetchone()

        waiting_status = result[0]
        if waiting_status == "True":
            return True
        else:
            return False
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}"

def format_admins_table():
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT * FROM admins")
        rows = cursor.fetchall()

        if not rows:
            return "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."

        columns = [desc[0] for desc in cursor.description]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        column_widths = [max(len(str(value)) for value in [col] + [row[idx] for row in rows]) for idx, col in enumerate(columns)]

        # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        table = "‚îå" + "‚î¨".join("‚îÄ" * (w + 2) for w in column_widths) + "‚îê\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = "‚îÇ " + " ‚îÇ ".join(f"{col.ljust(column_widths[idx])}" for idx, col in enumerate(columns)) + " ‚îÇ\n"
        table += header

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        table += "‚îú" + "‚îº".join("‚îÄ" * (w + 2) for w in column_widths) + "‚î§\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        for row in rows:
            row_line = "‚îÇ " + " ‚îÇ ".join(f"{str(value).ljust(column_widths[idx])}" for idx, value in enumerate(row)) + " ‚îÇ\n"
            table += row_line

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ç–∞–±–ª–∏—Ü—ã
        table += "‚îî" + "‚î¥".join("‚îÄ" * (w + 2) for w in column_widths) + "‚îò\n"

        return f"üìã –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n```\n{table}```"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def format_users_table():
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT * FROM users")
        rows = cursor.fetchall()

        if not rows:
            return "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        columns = [desc[0] for desc in cursor.description]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        column_widths = [max(len(str(value)) for value in [col] + [row[idx] for row in rows]) for idx, col in enumerate(columns)]

        # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        table = "‚îå" + "‚î¨".join("‚îÄ" * (w + 2) for w in column_widths) + "‚îê\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = "‚îÇ " + " ‚îÇ ".join(f"{col.ljust(column_widths[idx])}" for idx, col in enumerate(columns)) + " ‚îÇ\n"
        table += header

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        table += "‚îú" + "‚îº".join("‚îÄ" * (w + 2) for w in column_widths) + "‚î§\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        for row in rows:
            row_line = "‚îÇ " + " ‚îÇ ".join(f"{str(value).ljust(column_widths[idx])}" for idx, value in enumerate(row)) + " ‚îÇ\n"
            table += row_line

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ç–∞–±–ª–∏—Ü—ã
        table += "‚îî" + "‚î¥".join("‚îÄ" * (w + 2) for w in column_widths) + "‚îò\n"

        return f"üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n```\n{table}```"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
